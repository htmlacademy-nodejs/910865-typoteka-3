'use strict';

const express = require(`express`);
const request = require(`supertest`);

const article = require(`./article`);
const CommentService = require(`../data-service/comment`);
const ArticleService = require(`../data-service/article`);
const {HttpCode} = require(`../../constants`);

const mockData = [
  {
    "id":"A4xusS",
    "comments":[
      {"id":"ZMSdyD","text":"Плюсую, но слишком много буквы! Согласен с автором!"},
      {"id":"8Wdp7c","text":"Совсем немного... Давно не пользуюсь стационарными компьютерами. Ноутбуки победили. Мне не нравится ваш стиль. Ощущение, что вы меня поучаете."},
      {"id":"sNcYJ3","text":"Давно не пользуюсь стационарными компьютерами. Ноутбуки победили."}
      ],
    "title":"Самый лучший музыкальный альбом этого года",
    "announce":"Что такое золотое сечение Как достигнуть успеха не вставая с кресла Как начать программировать Самый лучший музыкальный альбом этого года Ёлки. История деревьев",
    "fullText":"Помните, небольшое количество ежедневных упражнений лучше, чем один раз, но много. Из под его пера вышло 8 платиновых альбомов. Ёлки — это не просто красивое дерево. Это прочная древесина. Ёлки — это не просто красивое дерево. Это прочная древесина. Альбом стал настоящим открытием года. Мощные гитарные рифы и скоростные соло-партии не дадут заскучать. Ёлки — это не просто красивое дерево. Это прочная древесина. Ёлки — это не просто красивое дерево. Это прочная древесина. Достичь успеха помогут ежедневные повторения. Достичь успеха помогут ежедневные повторения. Рок-музыка всегда ассоциировалась с протестами. Так ли это на самом деле? Рок-музыка всегда ассоциировалась с протестами. Так ли это на самом деле? Из под его пера вышло 8 платиновых альбомов. Бороться с прокрастинацией несложно. Просто действуйте. Маленькими шагами. Процессор заслуживает особого внимания. Он обязательно понравится геймерам со стажем. Простые ежедневные упражнения помогут достичь успеха. Ёлки — это не просто красивое дерево. Это прочная древесина. Вы можете достичь всего. Стоит только немного постараться и запастись книгами. Собрать камни бесконечности легко, если вы прирожденный герой. Как начать действовать? Для начала просто соберитесь. Ёлки — это не просто красивое дерево. Это прочная древесина. Простые ежедневные упражнения помогут достичь успеха. Освоить вёрстку несложно. Возьмите книгу новую книгу и закрепите все упражнения на практике. Игры и программирование разные вещи. Не стоит идти в программисты, если вам нравятся только игры. Вы можете достичь всего. Стоит только немного постараться и запастись книгами. Он написал больше 30 хитов. Процессор заслуживает особого внимания. Он обязательно понравится геймерам со стажем. Он написал больше 30 хитов. Программировать не настолько сложно, как об этом говорят. Он написал больше 30 хитов. Альбом стал настоящим открытием года. Мощные гитарные рифы и скоростные соло-партии не дадут заскучать. Рок-музыка всегда ассоциировалась с протестами. Так ли это на самом деле? Простые ежедневные упражнения помогут достичь успеха. Помните, небольшое количество ежедневных упражнений лучше, чем один раз, но много. Помните, небольшое количество ежедневных упражнений лучше, чем один раз, но много. Бороться с прокрастинацией несложно. Просто действуйте. Маленькими шагами. Альбом стал настоящим открытием года. Мощные гитарные рифы и скоростные соло-партии не дадут заскучать. Как начать действовать? Для начала просто соберитесь. Он написал больше 30 хитов. Бороться с прокрастинацией несложно. Просто действуйте. Маленькими шагами. Как начать действовать? Для начала просто соберитесь.",
    "createdDate":"2021-10-17 14:53:00",
    "category":["IT","Деревья","Музыка","Без рамки"]
  },
  {
    "id":"KZoNTS",
    "comments":[
      {"id":"6Ujlp4","text":"Это где ж такие красоты? Хочу такую же футболку :-) Планируете записать видосик на эту тему?"}
      ],
    "title":"Учим HTML и CSS","announce":"Самый лучший музыкальный альбом этого года Учим HTML и CSS Обзор новейшего смартфона",
    "fullText":"Рок-музыка всегда ассоциировалась с протестами. Так ли это на самом деле? Бороться с прокрастинацией несложно. Просто действуйте. Маленькими шагами. Ёлки — это не просто красивое дерево. Это прочная древесина. Из под его пера вышло 8 платиновых альбомов. Из под его пера вышло 8 платиновых альбомов. Из под его пера вышло 8 платиновых альбомов. Этот смартфон — настоящая находка. Большой и яркий экран, мощнейший процессор — всё это в небольшом гаджете. Вы можете достичь всего. Стоит только немного постараться и запастись книгами. Процессор заслуживает особого внимания. Он обязательно понравится геймерам со стажем. Этот смартфон — настоящая находка. Большой и яркий экран, мощнейший процессор — всё это в небольшом гаджете. Альбом стал настоящим открытием года. Мощные гитарные рифы и скоростные соло-партии не дадут заскучать. Он написал больше 30 хитов. Программировать не настолько сложно, как об этом говорят. Из под его пера вышло 8 платиновых альбомов. Золотое сечение — соотношение двух величин, гармоническая пропорция. Бороться с прокрастинацией несложно. Просто действуйте. Маленькими шагами. Игры и программирование разные вещи. Не стоит идти в программисты, если вам нравятся только игры. Первая большая ёлка была установлена только в 1938 году. Первая большая ёлка была установлена только в 1938 году. Освоить вёрстку несложно. Возьмите книгу новую книгу и закрепите все упражнения на практике. Этот смартфон — настоящая находка. Большой и яркий экран, мощнейший процессор — всё это в небольшом гаджете. Игры и программирование разные вещи. Не стоит идти в программисты, если вам нравятся только игры. Достичь успеха помогут ежедневные повторения. Освоить вёрстку несложно. Возьмите книгу новую книгу и закрепите все упражнения на практике. Ёлки — это не просто красивое дерево. Это прочная древесина. Из под его пера вышло 8 платиновых альбомов. Первая большая ёлка была установлена только в 1938 году. Вы можете достичь всего. Стоит только немного постараться и запастись книгами. Освоить вёрстку несложно. Возьмите книгу новую книгу и закрепите все упражнения на практике. Достичь успеха помогут ежедневные повторения. Первая большая ёлка была установлена только в 1938 году. Первая большая ёлка была установлена только в 1938 году. Игры и программирование разные вещи. Не стоит идти в программисты, если вам нравятся только игры. Бороться с прокрастинацией несложно. Просто действуйте. Маленькими шагами. Помните, небольшое количество ежедневных упражнений лучше, чем один раз, но много. Освоить вёрстку несложно. Возьмите книгу новую книгу и закрепите все упражнения на практике. Программировать не настолько сложно, как об этом говорят. Альбом стал настоящим открытием года. Мощные гитарные рифы и скоростные соло-партии не дадут заскучать. Как начать действовать? Для начала просто соберитесь. Помните, небольшое количество ежедневных упражнений лучше, чем один раз, но много.",
    "createdDate":"2021-09-27 05:13:22",
    "category":["Без рамки","Железо","IT","Разное","Кино","Программирование"]
  },
  {
    "id":"hgMm3Y",
    "comments":[
      {"id":"IRby5C","text":"Планируете записать видосик на эту тему? Мне не нравится ваш стиль. Ощущение, что вы меня поучаете. Плюсую, но слишком много буквы!"},
      {"id":"3dVNwk","text":"Давно не пользуюсь стационарными компьютерами. Ноутбуки победили. Это где ж такие красоты?"},
      {"id":"eNRBis","text":"Хочу такую же футболку :-) Согласен с автором! Давно не пользуюсь стационарными компьютерами. Ноутбуки победили."}
      ],
    "title":"Ёлки. История деревьев",
    "announce":"Как перестать беспокоиться и начать жить Как собрать камни бесконечности Ёлки. История деревьев",
    "fullText":"Альбом стал настоящим открытием года. Мощные гитарные рифы и скоростные соло-партии не дадут заскучать. Игры и программирование разные вещи. Не стоит идти в программисты, если вам нравятся только игры. Достичь успеха помогут ежедневные повторения. Первая большая ёлка была установлена только в 1938 году. Процессор заслуживает особого внимания. Он обязательно понравится геймерам со стажем. Из под его пера вышло 8 платиновых альбомов. Освоить вёрстку несложно. Возьмите книгу новую книгу и закрепите все упражнения на практике. Достичь успеха помогут ежедневные повторения. Бороться с прокрастинацией несложно. Просто действуйте. Маленькими шагами. Как начать действовать? Для начала просто соберитесь. Процессор заслуживает особого внимания. Он обязательно понравится геймерам со стажем. Программировать не настолько сложно, как об этом говорят. Ёлки — это не просто красивое дерево. Это прочная древесина. Освоить вёрстку несложно. Возьмите книгу новую книгу и закрепите все упражнения на практике. Рок-музыка всегда ассоциировалась с протестами. Так ли это на самом деле? Альбом стал настоящим открытием года. Мощные гитарные рифы и скоростные соло-партии не дадут заскучать. Собрать камни бесконечности легко, если вы прирожденный герой. Простые ежедневные упражнения помогут достичь успеха. Помните, небольшое количество ежедневных упражнений лучше, чем один раз, но много. Игры и программирование разные вещи. Не стоит идти в программисты, если вам нравятся только игры. Альбом стал настоящим открытием года. Мощные гитарные рифы и скоростные соло-партии не дадут заскучать. Альбом стал настоящим открытием года. Мощные гитарные рифы и скоростные соло-партии не дадут заскучать. Освоить вёрстку несложно. Возьмите книгу новую книгу и закрепите все упражнения на практике. Программировать не настолько сложно, как об этом говорят. Программировать не настолько сложно, как об этом говорят. Как начать действовать? Для начала просто соберитесь. Собрать камни бесконечности легко, если вы прирожденный герой. Альбом стал настоящим открытием года. Мощные гитарные рифы и скоростные соло-партии не дадут заскучать. Игры и программирование разные вещи. Не стоит идти в программисты, если вам нравятся только игры. Процессор заслуживает особого внимания. Он обязательно понравится геймерам со стажем. Собрать камни бесконечности легко, если вы прирожденный герой. Помните, небольшое количество ежедневных упражнений лучше, чем один раз, но много. Это один из лучших рок-музыкантов. Достичь успеха помогут ежедневные повторения. Рок-музыка всегда ассоциировалась с протестами. Так ли это на самом деле? Рок-музыка всегда ассоциировалась с протестами. Так ли это на самом деле? Процессор заслуживает особого внимания. Он обязательно понравится геймерам со стажем. Собрать камни бесконечности легко, если вы прирожденный герой. Освоить вёрстку несложно. Возьмите книгу новую книгу и закрепите все упражнения на практике. Собрать камни бесконечности легко, если вы прирожденный герой.",
    "createdDate":"2021-10-12 16:44:30",
    "category":["Деревья","Музыка","Кино","За жизнь","Железо","Разное"]
  },
  {
    "id":"HRCYL1",
    "comments":[
      {"id":"THMf9z","text":"Плюсую, но слишком много буквы! Совсем немного..."},
      {"id":"JHCBbo","text":"Хочу такую же футболку :-) Давно не пользуюсь стационарными компьютерами. Ноутбуки победили."},
      {"id":"By7k68","text":"Плюсую, но слишком много буквы! Совсем немного... Давно не пользуюсь стационарными компьютерами. Ноутбуки победили."}
      ],
    "title":"Самый лучший музыкальный альбом этого года",
    "announce":"Как достигнуть успеха не вставая с кресла Как начать программировать Обзор новейшего смартфона Ёлки. История деревьев",
    "fullText":"Программировать не настолько сложно, как об этом говорят. Рок-музыка всегда ассоциировалась с протестами. Так ли это на самом деле? Альбом стал настоящим открытием года. Мощные гитарные рифы и скоростные соло-партии не дадут заскучать. Ёлки — это не просто красивое дерево. Это прочная древесина. Альбом стал настоящим открытием года. Мощные гитарные рифы и скоростные соло-партии не дадут заскучать. Как начать действовать? Для начала просто соберитесь. Первая большая ёлка была установлена только в 1938 году. Процессор заслуживает особого внимания. Он обязательно понравится геймерам со стажем. Достичь успеха помогут ежедневные повторения. Простые ежедневные упражнения помогут достичь успеха. Этот смартфон — настоящая находка. Большой и яркий экран, мощнейший процессор — всё это в небольшом гаджете. Достичь успеха помогут ежедневные повторения. Ёлки — это не просто красивое дерево. Это прочная древесина. Первая большая ёлка была установлена только в 1938 году. Как начать действовать? Для начала просто соберитесь. Освоить вёрстку несложно. Возьмите книгу новую книгу и закрепите все упражнения на практике. Он написал больше 30 хитов. Это один из лучших рок-музыкантов. Первая большая ёлка была установлена только в 1938 году. Собрать камни бесконечности легко, если вы прирожденный герой. Игры и программирование разные вещи. Не стоит идти в программисты, если вам нравятся только игры. Процессор заслуживает особого внимания. Он обязательно понравится геймерам со стажем. Золотое сечение — соотношение двух величин, гармоническая пропорция. Достичь успеха помогут ежедневные повторения. Рок-музыка всегда ассоциировалась с протестами. Так ли это на самом деле? Как начать действовать? Для начала просто соберитесь. Альбом стал настоящим открытием года. Мощные гитарные рифы и скоростные соло-партии не дадут заскучать. Освоить вёрстку несложно. Возьмите книгу новую книгу и закрепите все упражнения на практике. Простые ежедневные упражнения помогут достичь успеха. Достичь успеха помогут ежедневные повторения. Первая большая ёлка была установлена только в 1938 году. Этот смартфон — настоящая находка. Большой и яркий экран, мощнейший процессор — всё это в небольшом гаджете. Как начать действовать? Для начала просто соберитесь. Помните, небольшое количество ежедневных упражнений лучше, чем один раз, но много. Достичь успеха помогут ежедневные повторения. Помните, небольшое количество ежедневных упражнений лучше, чем один раз, но много. Ёлки — это не просто красивое дерево. Это прочная древесина. Освоить вёрстку несложно. Возьмите книгу новую книгу и закрепите все упражнения на практике. Вы можете достичь всего. Стоит только немного постараться и запастись книгами. Это один из лучших рок-музыкантов.",
    "createdDate":"2021-09-05 08:16:52",
    "category":["За жизнь","Программирование","IT","Музыка"]
  },
  {
    "id":"X8ne8F",
    "comments":[
      {"id":"cA15TQ","text":"Согласен с автором! Давно не пользуюсь стационарными компьютерами. Ноутбуки победили. Планируете записать видосик на эту тему?"},
      {"id":"dG0Ur2","text":"Мне не нравится ваш стиль. Ощущение, что вы меня поучаете."},
      {"id":"pV6Iir","text":"Это где ж такие красоты? Планируете записать видосик на эту тему?"}
      ],
    "title":"Лучшие рок-музыканты 20-века","announce":"Как перестать беспокоиться и начать жить Как достигнуть успеха не вставая с кресла Учим HTML и CSS Что такое золотое сечение",
    "fullText":"Этот смартфон — настоящая находка. Большой и яркий экран, мощнейший процессор — всё это в небольшом гаджете. Этот смартфон — настоящая находка. Большой и яркий экран, мощнейший процессор — всё это в небольшом гаджете. Бороться с прокрастинацией несложно. Просто действуйте. Маленькими шагами. Он написал больше 30 хитов. Альбом стал настоящим открытием года. Мощные гитарные рифы и скоростные соло-партии не дадут заскучать. Игры и программирование разные вещи. Не стоит идти в программисты, если вам нравятся только игры. Игры и программирование разные вещи. Не стоит идти в программисты, если вам нравятся только игры. Альбом стал настоящим открытием года. Мощные гитарные рифы и скоростные соло-партии не дадут заскучать. Он написал больше 30 хитов. Как начать действовать? Для начала просто соберитесь. Бороться с прокрастинацией несложно. Просто действуйте. Маленькими шагами. Альбом стал настоящим открытием года. Мощные гитарные рифы и скоростные соло-партии не дадут заскучать. Он написал больше 30 хитов. Простые ежедневные упражнения помогут достичь успеха. Простые ежедневные упражнения помогут достичь успеха. Программировать не настолько сложно, как об этом говорят. Достичь успеха помогут ежедневные повторения. Первая большая ёлка была установлена только в 1938 году. Вы можете достичь всего. Стоит только немного постараться и запастись книгами. Помните, небольшое количество ежедневных упражнений лучше, чем один раз, но много. Золотое сечение — соотношение двух величин, гармоническая пропорция. Освоить вёрстку несложно. Возьмите книгу новую книгу и закрепите все упражнения на практике. Он написал больше 30 хитов. Рок-музыка всегда ассоциировалась с протестами. Так ли это на самом деле? Игры и программирование разные вещи. Не стоит идти в программисты, если вам нравятся только игры. Золотое сечение — соотношение двух величин, гармоническая пропорция. Собрать камни бесконечности легко, если вы прирожденный герой. Ёлки — это не просто красивое дерево. Это прочная древесина. Это один из лучших рок-музыкантов. Альбом стал настоящим открытием года. Мощные гитарные рифы и скоростные соло-партии не дадут заскучать. Помните, небольшое количество ежедневных упражнений лучше, чем один раз, но много. Рок-музыка всегда ассоциировалась с протестами. Так ли это на самом деле? Рок-музыка всегда ассоциировалась с протестами. Так ли это на самом деле? Первая большая ёлка была установлена только в 1938 году. Альбом стал настоящим открытием года. Мощные гитарные рифы и скоростные соло-партии не дадут заскучать. Вы можете достичь всего. Стоит только немного постараться и запастись книгами. Программировать не настолько сложно, как об этом говорят. Программировать не настолько сложно, как об этом говорят. Этот смартфон — настоящая находка. Большой и яркий экран, мощнейший процессор — всё это в небольшом гаджете. Из под его пера вышло 8 платиновых альбомов.",
    "createdDate":"2021-10-01 03:41:03",
    "category":["Деревья","IT","Разное","За жизнь","Музыка","Без рамки","Кино"]
  }
];
const createAPI = () => {
  const app = express();
  const cloneData = JSON.parse(JSON.stringify(mockData));

  app.use(express.json());
  article(app, new ArticleService(cloneData), new CommentService());

  return app;
};

describe(`API returns a list of all articles`, () => {
  const app = createAPI();
  let response;

  beforeAll(async () => {
    response = await request(app)
      .get(`/articles`);
  });

  test(`Status code 200`, () => expect(response.statusCode).toBe(HttpCode.OK));
  test(`Returns a list of 5 articles`, () => expect(response.body.length).toBe(5));
  test(`First article's id equals "A4xusS"`, () => expect(response.body[0].id).toBe("A4xusS"));
});

describe(`API returns an article with given id`, () => {
  const app = createAPI();
  let response;

  beforeAll(async () => {
    response = await request(app)
      .get(`/articles/A4xusS`);
  });

  test(`Status code 200`, () => expect(response.statusCode).toBe(HttpCode.OK));
  test(`Article's title is "Самый лучший музыкальный альбом этого года"`, () => expect(response.body.title).toBe(`Самый лучший музыкальный альбом этого года`));
});

describe(`API returns 404 with uncorrect id`, () => {
  const app = createAPI();
  let response;

  beforeAll(async () => {
    response = await request(app)
      .get(`/articles/A4xuS`);
  });

  test(`API returns 404 with uncorrect id`, () => expect(response.statusCode).toBe(HttpCode.NOT_FOUND));
});

describe(`API creates an article if data is valid`, () => {
  const newArticle = {
    "title":"test title",
    "announce":"test announce",
    "fullText":"test text",
    "createdDate":"2021-11-6 04:37:00",
    "category":["category #1","category #2"]
  };
  const app = createAPI();
  let response;

  beforeAll(async () => {
    response = await request(app)
      .post(`/articles`)
      .send(newArticle);
  });

  test(`Status code 201`, () => expect(response.statusCode).toBe(HttpCode.CREATED));
  test(`Returns article created`, () => {
    expect(response.body).toEqual(
      expect.objectContaining(newArticle));
  });
  test(`Articles count is changed`, () => {
      request(app)
        .get(`/articles`)
        .expect((res) => expect(res.body.length).toBe(6));
  });
});

describe(`API refuses to create an article if data is invalid`, () => {
  const newArticle = {
    "title":"test title",
    "announce":"test announce",
    "fullText":"test text",
    "createdDate":"2021-11-6 04:37:00",
    "category":["category #1","category #2"]
  };
  const app = createAPI();

  test(`Without any required property response code is 400`, async () => {
    for (const key of Object.keys(newArticle)) {
      const badArticle = {...newArticle};

      delete badArticle[key];
      await request(app)
        .post(`/articles`)
        .send(badArticle)
        .expect(HttpCode.BAD_REQUEST);
    }
  });
  test(`Articles count didn't change`, () => {
    request(app)
      .get(`/articles`)
      .expect((res) => expect(res.body.length).toBe(5));
  });
});

describe(`API changes existent article`, () => {
  const newArticle = {
    "title":"test title",
    "announce":"test announce",
    "fullText":"test text",
    "createdDate":"2021-11-6 04:37:00",
    "category":["category #1","category #2"]
  };
  const app = createAPI();
  let response;

  beforeAll(async () => {
    response = await request(app)
      .put(`/articles/A4xusS`)
      .send(newArticle);
  });

  test(`Status code 200`, () => expect(response.statusCode).toBe(HttpCode.OK));
  test(`Returns changed article`, () => expect(response.body).toEqual(expect.objectContaining(newArticle)));
  test(`Article is really changed`, () => {
    request(app)
        .get(`/articles/A4xusS`)
        .expect((res) => expect(res.body.title).toBe(`test title`));
    }
  );
  test(`API returns status code 404 when trying to change non-existent article`, () => {
    const app = createAPI();
    const validArticle = {
      "title":"test title",
      "announce":"test announce",
      "fullText":"test text",
      "createdDate":"2021-11-6 04:37:00",
      "category":["category #1","category #2"]
    };

    return request(app)
      .put(`/articles/err`)
      .send(validArticle)
      .expect(HttpCode.NOT_FOUND);
  });
  test(`API returns status code 400 when trying to change an article with invalid data`, () => {
    const app = createAPI();
    const invalidArticle = {
      "title":"test title",
      "announce":"test announce",
      "createdDate":"2021-11-6 04:37:00",
      "category":["category #1","category #2"]
    };

    return request(app)
      .put(`/articles/err`)
      .send(invalidArticle)
      .expect(HttpCode.BAD_REQUEST);
  });
});

describe(`API correctly deletes an article`, () => {
  const app = createAPI();
  let response;

  beforeAll(async () => {
    response = await request(app)
      .delete(`/articles/A4xusS`);
  });

  test(`Status code 200`, () => expect(response.statusCode).toBe(HttpCode.OK));
  test(`Returns deleted article`, () => expect(response.body.id).toBe(`A4xusS`));
  test(`Article count is 4 now`, () => {
    request(app)
        .get(`/articles`)
        .expect((res) => expect(res.body.length).toBe(4));
    }
  );
});

describe(`API workds correcty if trying to delete non-existent article`, () => {
  const app = createAPI();
  let response;

  beforeAll(async () => {
    response = await request(app)
      .delete(`/articles/err`);
  });

  test(`API refuses to delete non-existent article`, () => {
    const app = createAPI();

    return request(app)
      .delete(`/articles/err`)
      .expect(HttpCode.NOT_FOUND);
  });

  test(`API returns correct amount of articles if non-existent article being deleted`, () => {
    request(app)
        .get(`/articles`)
        .expect((res) => expect(res.body.length).toBe(5));
  });
});

describe(`API workds correctly while trying to post a comment`, () => {
  const app = createAPI();
  let response;

  (async () => {
    response = await request(app)
      .post(`/articles/A4xusS/comments`)
      .send({
        text: `test article text`
      });
  })();

  test(`Returns status code 201`, () => expect(response.statusCode).toBe(HttpCode.CREATED));
  test(`Returns correct amount of comments`, () => {
    request(app)
      .get(`/articles/A4xusS/comments`)
      .expect((res) => expect(res.body.length).toBe(4));
  });
});

test(`API returns 404 while trying to post a comment to an absent article`, () => {
  const app = createAPI();

  return request(app)
    .post(`/articles/err/comments`)
    .expect(HttpCode.NOT_FOUND);
});

test(`API works correctly while trying to send wrong obj`, () => {
  const app = createAPI();

  return request(app)
    .post(`/articles/A4xusS/comments`)
    .send({
      cat: `dog`
    }).then(() =>
    expect(HttpCode.BAD_REQUEST));
});

test(`API refuses to delete non-existent comment`, () => {
  const app = createAPI();

  return request(app)
    .delete(`/articles/A4xusS/comments/err`)
    .expect(HttpCode.NOT_FOUND);
});

describe(`API deletes comment correctly`, () => {
  const app = createAPI();
  let response;

  (async () => {
    response = await request(app)
      .delete(`/articles/A4xusS/comments/ZMSdyD`);
  })();

  test(`API returns status code 200`, () => expect(response.statusCode).toEqual(HttpCode.OK));
  test(`API returns correct amount of comments`, () => {
    request(app)
      .get(`/articles/A4xusS/comments/`)
      .expect((res) => expect(res.body.length).toEqual(2));
  });
});

describe(`API works correctly while getting article's comments`, () => {
  const app = createAPI();
  let response;

  (async () => {
    response = await request(app)
      .get(`/articles/A4xusS/comments`);
  })();

  test(`Returns correct amount of comments`, () => expect(response.body.length).toBe(3));
  test(`Returns status code 200`, () => expect(response.statusCode).toBe(HttpCode.OK));
});

test(`API works correctly while getting absent article's id comments`, () => {
  const app = createAPI();

  return request(app)
    .get(`/articles/err/comments`)
    .expect(HttpCode.NOT_FOUND);
});
